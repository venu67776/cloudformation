# Tempalte for allowing cross account S3 bucket access to copy objects from source account to destination S3 buckets.

# Authors: 
#   Lakshmoji <lakshmoji@zelarsoft.com>

---
AWSTemplateFormatVersion: '2010-09-09'
  
Description: >-
  Template allowing cross account S3 bucket access to copy objects from source account to destination S3 buckets.
Parameters:
  
  SourceS3BucketName:
    Type: String
    Description: >-
      Name of the S3 Bucket that needs to be shared across accounts.
    MinLength: 5
    MaxLength: 64
  DestS3BucketName:
    Type: String
    Description: >-
      Name of the S3 Bucket that needs to be shared across accounts.
    MinLength: 5
    MaxLength: 64

Resources:

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import urllib

          TARGET_BUCKET = 'zelartest-2'

          def lambda_handler(event, context):
              
              # Get incoming bucket and key
              source_bucket = event['Records'][0]['s3']['bucket']['name']
              source_key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'])

              # Copy object to different bucket
              s3_resource = boto3.resource('s3')
              copy_source = {
                  'Bucket': source_bucket,
                  'Key': source_key
              }
              target_key = source_key # Change if desired
              s3_resource.Bucket(TARGET_BUCKET).Object(target_key).copy(copy_source, ExtraArgs={'ACL': 'bucket-owner-full-control'})
      MemorySize: 128
      Timeout: 3
      Handler: index.lambda_handler
      Role: !GetAtt SourceIAMRole.Arn
      Runtime: python3.6

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub arn:aws:s3:::${SourceS3BucketName}

  SourceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SourceIAMRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - lambda.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: SourceLogGroupPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'
      - PolicyName: SourceLambdaPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 's3:GetBucketNotification'
              - 's3:PutBucketNotification'
            Resource: '*'
      - PolicyName: SourceBucketRole-A
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket 
              - s3:GetObject
            Resource: 
              - !Sub arn:aws:s3:::${SourceS3BucketName}/*
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: 
              - !Sub arn:aws:s3:::${DestS3BucketName}/*

  CustomResourceLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt SourceIAMRole.Arn
      Code:
        ZipFile: |

            from __future__ import print_function
            import json
            import boto3
            import cfnresponse
            
            SUCCESS = "SUCCESS"
            FAILED = "FAILED"
            
            print('Loading function')
            s3 = boto3.resource('s3')
            
            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")
                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        add_notification(LambdaArn, Bucket)
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData)

            def add_notification(LambdaArn, Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                  NotificationConfiguration={
                    'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*'
                          ]
                      }
                    ]
                  }
                )
                print("Put request completed....")
              
            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")
      Runtime: python3.6
      Timeout: 50

  LambdaTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt LambdaFunction.Arn
      Bucket: !Ref SourceS3BucketName


Outputs:
  SourceBucketRoleArn:
    Value: !GetAtt SourceIAMRole.Arn
    Description: SourceS3Bucket-RoleArn